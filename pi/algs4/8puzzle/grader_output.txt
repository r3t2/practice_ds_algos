See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (1 warning)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 143 warnings)

Correctness:  48/48 tests passed
Memory:       13/13 tests passed
Timing:       125/125 tests passed

Aggregate score: 100.00%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
5.4K Oct  6 16:14 Board.java
4.4K Oct  6 16:14 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'printpq()' is never called.  At Solver.java:[lines 115-119]
Warnings generated: 1


================================================================


% pmd .
*-----------------------------------------------------------
Board.java:6: The private instance (or static) variable 'blocks' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:7: The private instance (or static) variable 'n' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:22: Avoid unused local variables, such as 'cnt'. [UnusedLocalVariable]
Solver.java:67: The private instance (or static) variable 'pq' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:138: The private instance (or static) variable 'dist' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:139: The private instance (or static) variable 'board' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:140: The private instance (or static) variable 'prev' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:141: The private instance (or static) variable 'moves' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 8 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:6:31: The comment is empty. [IllegalTokenText]
[WARN] Board.java:18:9: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:24:10: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:24:16: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:24:17: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:24:21: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:24:22: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:26:12: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:26:18: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:26:19: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:26:23: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:26:24: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:29:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:45:10: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:45:16: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:45:17: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:45:21: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:45:22: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:47:12: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:47:18: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:47:19: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:47:23: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:47:24: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:49:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:49:30: '!=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:49:62: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:60:10: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:60:16: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:60:17: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:60:21: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:60:22: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:62:12: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:62:18: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:62:19: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:62:23: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:62:24: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:65:13: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:70:19: '(' is followed by whitespace. [ParenPad]
[WARN] Board.java:70:55: ')' is preceded with whitespace. [ParenPad]
...
Checkstyle ends with 0 errors and 142 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:67:13: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [Design]
Checkstyle ends with 0 errors and 1 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 23 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
  * argument is of type String
  * Board object stored in a variable of type Object
==> passed

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
  * n = 3
  * n = 4
  * 5 <= n < 10
==> passed

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
  * m = 2, n = 5
  * m = 5, n = 3
  * m = 2, n = 3
  * m = 3, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 23/23 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2           152                  128
=> passed     3           216                  192
=> passed     4           264                  240
=> passed     8           584                  560
=> passed    12          1032                 1008
=> passed    16          1608                 1584
=> passed    20          2312                 2288
=> passed    37          6880                 6856
=> passed    72         23112                23088
=> passed   120         61512                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 72.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 1b: check solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 2a: check moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 2b: check solution() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 9a: check that equals() method in Board is called
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9b: check that equals() method in Board is called only
         with an argument of type Board
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9c: check that equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
  * puzzle27.txt
==> passed

Test 10: check that constructor throws exception if board is null
==> passed

Test 11a: check moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 11b: check solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12a: check moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 12b: check solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 13a: check moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 13b: check solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 14a: check moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed

Test 14b: check solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 25/25 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 3 total tests.

Test 1: memory with puzzle20.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 2936 bytes
  - memory of reference Solver = 4896 bytes
  - student / reference        = 0.60
==> passed

Test 2: memory with puzzle25.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 3616 bytes
  - memory of reference Solver = 6056 bytes
  - student / reference        = 0.60
==> passed

Test 3: memory with puzzle30.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 4296 bytes
  - memory of reference Solver = 7216 bytes
  - student / reference        = 0.60
==> passed


Total: 3/3 tests passed!

================================================================



********************************************************************************
*  TIMING (substituting reference Board)
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

Test 1: measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
=> passed  puzzle20.txt      20    3     0.01 
=> passed  puzzle22.txt      22    3     0.01 
=> passed  puzzle21.txt      21    3     0.01 
=> passed  puzzle23.txt      23    3     0.01 
=> passed  puzzle24.txt      24    3     0.01 
=> passed  puzzle25.txt      25    3     0.01 
=> passed  puzzle27.txt      27    3     0.01 
=> passed  puzzle29.txt      29    3     0.01 
=> passed  puzzle26.txt      26    3     0.01 
=> passed  puzzle28.txt      28    3     0.03 
=> passed  puzzle30.txt      30    3     0.04 
=> passed  puzzle31.txt      31    3     0.04 
=> passed  puzzle39.txt      39    4     0.06 
=> passed  puzzle41.txt      41    5     0.16 
=> passed  puzzle34.txt      34    4     0.13 
=> passed  puzzle37.txt      37    4     0.14 
=> passed  puzzle44.txt      44    5     0.21 
=> passed  puzzle32.txt      32    4     0.28 
=> passed  puzzle35.txt      35    4     0.29 
=> passed  puzzle33.txt      33    4     0.33 
=> passed  puzzle43.txt      43    4     0.59 
=> passed  puzzle46.txt      46    4     0.77 
=> passed  puzzle40.txt      40    4     0.62 
=> passed  puzzle36.txt      36    4     1.17 
=> passed  puzzle45.txt      45    4     1.31 
==> 25/25 tests passed



Test 2: count MinPQ operations

               filename   insert()         delMin()      max PQ size
--------------------------------------------------------------------
=> passed  puzzle20.txt       1441              854              587         
=> passed  puzzle22.txt       3484             2072             1412         
=> passed  puzzle21.txt       3543             2082             1461         
=> passed  puzzle23.txt       5300             3150             2151         
=> passed  puzzle24.txt       5428             3260             2169         
=> passed  puzzle25.txt      10317             6104             4214         
=> passed  puzzle27.txt      11211             6742             4469         
=> passed  puzzle29.txt      11638             7078             4561         
=> passed  puzzle26.txt      11895             7100             4796         
=> passed  puzzle28.txt      26975            16232            10744         
=> passed  puzzle30.txt      43095            26058            17038         
=> passed  puzzle31.txt      46010            27806            18204         
=> passed  puzzle39.txt      71418            35046            36373         
=> passed  puzzle41.txt     116494            50010            66484         
=> passed  puzzle34.txt     151675            73160            78515         
=> passed  puzzle37.txt     166814            80086            86728         
=> passed  puzzle44.txt     275664           123166           152498         
=> passed  puzzle32.txt     521598           249496           272102         
=> passed  puzzle35.txt     528420           257298           271122         
=> passed  puzzle33.txt     622354           298884           323470         
=> passed  puzzle43.txt    1056807           508834           547973         
=> passed  puzzle46.txt    1032321           516742           515580         
=> passed  puzzle40.txt    1108445           541468           566977         
=> passed  puzzle36.txt    2086333          1011486          1074847         
=> passed  puzzle45.txt    2418082          1189754          1228328         
==> 25/25 tests passed



Test 3: count Board operations (that should not get called)

               filename    hamming()   toString()     tileAt()
--------------------------------------------------------------
=> passed  puzzle20.txt            0            0            0         
=> passed  puzzle22.txt            0            0            0         
=> passed  puzzle21.txt            0            0            0         
=> passed  puzzle23.txt            0            0            0         
=> passed  puzzle24.txt            0            0            0         
=> passed  puzzle25.txt            0            0            0         
=> passed  puzzle27.txt            0            0            0         
=> passed  puzzle29.txt            0            0            0         
=> passed  puzzle26.txt            0            0            0         
=> passed  puzzle28.txt            0            0            0         
=> passed  puzzle30.txt            0            0            0         
=> passed  puzzle31.txt            0            0            0         
=> passed  puzzle39.txt            0            0            0         
=> passed  puzzle41.txt            0            0            0         
=> passed  puzzle34.txt            0            0            0         
=> passed  puzzle37.txt            0            0            0         
=> passed  puzzle44.txt            0            0            0         
=> passed  puzzle32.txt            0            0            0         
=> passed  puzzle35.txt            0            0            0         
=> passed  puzzle33.txt            0            0            0         
=> passed  puzzle43.txt            0            0            0         
=> passed  puzzle46.txt            0            0            0         
=> passed  puzzle40.txt            0            0            0         
=> passed  puzzle36.txt            0            0            0         
=> passed  puzzle45.txt            0            0            0         
==> 25/25 tests passed



Test 4a: count Board operations (that should get called)

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> passed  puzzle20.txt       2292                2290                2295         
=> passed  puzzle22.txt       5553                5551                5556         
=> passed  puzzle21.txt       5622                5620                5625         
=> passed  puzzle23.txt       8447                8445                8450         
=> passed  puzzle24.txt       8685                8683                8688         
=> passed  puzzle25.txt      16418               16416               16421         
=> passed  puzzle27.txt      17950               17948               17953         
=> passed  puzzle29.txt      18713               18711               18716         
=> passed  puzzle26.txt      18992               18990               18995         
=> passed  puzzle28.txt      43204               43202               43207         
=> passed  puzzle30.txt      69150               69148               69153         
=> passed  puzzle31.txt      73813               73811               73816         
=> passed  puzzle39.txt     106461              106459              106464         
=> passed  puzzle41.txt     166501              166499              166504         
=> passed  puzzle34.txt     224832              224830              224835         
=> passed  puzzle37.txt     246897              246895              246900         
=> passed  puzzle44.txt     398827              398825              398830         
=> passed  puzzle32.txt     771091              771089              771094         
=> passed  puzzle35.txt     785715              785713              785718         
=> passed  puzzle33.txt     921235              921233              921238         
=> passed  puzzle43.txt    1565638             1565636             1565641         
=> passed  puzzle46.txt    1549060             1549058             1549063         
=> passed  puzzle40.txt    1649910             1649908             1649913         
=> passed  puzzle36.txt    3097816             3097814             3097819         
=> passed  puzzle45.txt    3607833             3607831             3607836         
==> 25/25 tests passed



Test 4b: count Board operations (that should get called),
         rejecting if doesn't adhere to stricter caching limits

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> passed  puzzle20.txt       2292                2290                2295         
=> passed  puzzle22.txt       5553                5551                5556         
=> passed  puzzle21.txt       5622                5620                5625         
=> passed  puzzle23.txt       8447                8445                8450         
=> passed  puzzle24.txt       8685                8683                8688         
=> passed  puzzle25.txt      16418               16416               16421         
=> passed  puzzle27.txt      17950               17948               17953         
=> passed  puzzle29.txt      18713               18711               18716         
=> passed  puzzle26.txt      18992               18990               18995         
=> passed  puzzle28.txt      43204               43202               43207         
=> passed  puzzle30.txt      69150               69148               69153         
=> passed  puzzle31.txt      73813               73811               73816         
=> passed  puzzle39.txt     106461              106459              106464         
=> passed  puzzle41.txt     166501              166499              166504         
=> passed  puzzle34.txt     224832              224830              224835         
=> passed  puzzle37.txt     246897              246895              246900         
=> passed  puzzle44.txt     398827              398825              398830         
=> passed  puzzle32.txt     771091              771089              771094         
=> passed  puzzle35.txt     785715              785713              785718         
=> passed  puzzle33.txt     921235              921233              921238         
=> passed  puzzle43.txt    1565638             1565636             1565641         
=> passed  puzzle46.txt    1549060             1549058             1549063         
=> passed  puzzle40.txt    1649910             1649908             1649913         
=> passed  puzzle36.txt    3097816             3097814             3097819         
=> passed  puzzle45.txt    3607833             3607831             3607836         
==> 25/25 tests passed


Total: 125/125 tests passed!


================================================================
